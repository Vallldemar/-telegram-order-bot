
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

API_TOKEN = '8168647860:AAEvORyhzYG9_rC8W2AoakF_9ust1UKy-NE'
ADMIN_ID = 439073803

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–°–µ—Ä–∏—è –≠–ö–û"), KeyboardButton("–°–µ—Ä–∏—è –°–¢–ê–ù–î–ê–†–¢"))
main_kb.add(KeyboardButton("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"), KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"))

eco_kb = ReplyKeyboardMarkup(resize_keyboard=True)
eco_kb.add(KeyboardButton("–≠–ö–û 200 –í—Ç"), KeyboardButton("–≠–ö–û 400 –í—Ç"))
eco_kb.add(KeyboardButton("–≠–ö–û 500 –í—Ç"), KeyboardButton("–≠–ö–û 620 –í—Ç"))
eco_kb.add(KeyboardButton("–≠–ö–û 800 –í—Ç"))
eco_kb.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))

standard_kb = ReplyKeyboardMarkup(resize_keyboard=True)
standard_kb.add(KeyboardButton("–°–¢–ê–ù–î–ê–†–¢ 400 –í—Ç"), KeyboardButton("–°–¢–ê–ù–î–ê–†–¢ 500 –í—Ç"))
standard_kb.add(KeyboardButton("–°–¢–ê–ù–î–ê–†–¢ 620 –í—Ç"), KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))

user_cart = {}
user_data = {}

@dp.callback_query_handler(Text(equals="reuse_data"))
async def reuse_delivery_data(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_cart[user_id] = user_data[user_id].copy()
    user_cart[user_id]["awaiting"] = "tk"
    tk_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    tk_kb.add(KeyboardButton("–ö–ò–¢"), KeyboardButton("–î–µ–ª–æ–≤—ã–µ –ª–∏–Ω–∏–∏"), KeyboardButton("–ü–≠–ö"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=tk_kb)
    await call.answer()

@dp.callback_query_handler(Text(equals="reset_data"))
async def reset_delivery_data(call: types.CallbackQuery):
    user_cart[call.from_user.id] = {"items": [], "awaiting": "lastname"}
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await call.answer()

@dp.callback_query_handler(Text(equals="confirm"))
async def confirm_order(call: types.CallbackQuery):
    user_id = call.from_user.id
    items = user_cart.get(user_id, {}).get("items", [])
    if user_id in user_data:
        user_cart[user_id] = user_data[user_id].copy()
        user_cart[user_id]["items"] = items
        user_cart[user_id]["awaiting"] = "tk"
        tk_kb = ReplyKeyboardMarkup(resize_keyboard=True)
        tk_kb.add(KeyboardButton("–ö–ò–¢"), KeyboardButton("–î–µ–ª–æ–≤—ã–µ –ª–∏–Ω–∏–∏"), KeyboardButton("–ü–≠–ö"))
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=tk_kb)
    else:
        user_cart[user_id] = {"items": items, "awaiting": "lastname"}
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await call.answer()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_cart[user_id] = {"items": []}
    if user_id in user_data:
        reuse_text = (
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏?\n\n"
            f"üë§ {user_data[user_id]['lastname']} {user_data[user_id]['firstname']} {user_data[user_id]['middlename']}\n"
            f"üèô {user_data[user_id]['city']}\n"
            f"üìû {user_data[user_id]['phone']}"
        )
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="reuse_data"),
            InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="reset_data")
        )
        await message.answer(reuse_text, reply_markup=markup)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_kb)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ–ø—É—â–µ–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏...
